{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Competitive Programming": {
		"prefix": "CPTemp",
		"body": [
			"/**",
 			" *    author:    tachithanhdanh", 
 			" *    created:   $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE    $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"**/",
			"",
		  "#include <bits/stdc++.h> // see /general/running-code-locally",
		  "using namespace std;",
		  "",
		  	"#ifdef LOCAL",
			"#include \"debugging.h\"",
			"#endif",
			"",
		  "#define endl \"\\n\"",
		  "",
		  "using ll = long long;",
		  "using str = string;",
		  "",
		  "// vectors",
		  "using vi = vector<int>;",
		  "using vl = vector<ll>;",
		  "using vb = vector<bool>;",
		  "using vs = vector<str>;",
		  "#define all(x) begin(x), end(x)",
		  "#define sz(x) int(size(x))",
		  "#define pb push_back",
		  "",
		  "// pairs",
		  "using pi = pair<int, int>;",
		  "using vpi = vector<pi>;",
		  "#define f first",
		  "#define s second",
		  "#define mp make_pair",
		  "",
		//   "//for printing variables when debugging",
		//   "#ifdef LOCAL",
		//   "#define db(x) cerr << (#x) << \" is \" << (x) << endl",
		//   "#else",
		//   "#define db(x) 42",
		//   "#endif // LOCAL",
		//   "",
		  "// set min-max value.",
		  "template<typename T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; } // set a = min(a,b)",
		  "template<typename T> bool ckmax(T& a, const T& b) { return b > a ? a = b, 1 : 0; } // set a = max(a,b)",
		  "",
		  "// constant initialization",
		  "const str yes=\"YES\\n\", no=\"NO\\n\";",
		  "const int MOD = 1e9 + 7; // 998244353",
		  "const int MX = 2e5 + 10;",
		  "const ll INF = 1e18; //Not too close to LLONG_MAX",
		  "const int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1}; // for every grid problem!!",
		  "const char dc[4] = {'r', 'u', 'l', 'd'};",
		  "const bool multitest = true;",
		  "",
		//   "void setIO(string name = \"\") {",
		//   "	cin.tie(0)->sync_with_stdio(0); // see /general/fast-io",
		//   "	if (sz(name)) {",
		//   "		freopen((name+\".in\").c_str(), \"r\", stdin); // see /general/io",
		//   "		freopen((name+\".out\").c_str(), \"w\", stdout);",
		//   "	}",
		//   "}",
		//   "",
		  "void solve() {",
		  "	",
		  "}"
		  "",
		  "int main() {",
		  //   "	setIO();",
		  "	cin.tie(0)->sync_with_stdio(0); // see /general/fast-io",
		  "	#ifdef LOCAL",
		  "	freopen(\"input.txt\", \"r\", stdin);",
		  //   "	freopen(\"output.txt\",\"w\",stdout);",
		  //   "	freopen(\"error.txt\",\"w\",stderr);",
		  "	#endif // LOCAL",
			"	int tt = 1;",
			"	if (multitest) cin >> tt;",
			"	for (int t = 0; t < tt; ++t) {",
			"		solve();",
			"	}",
		  //   "	auto start = chrono::system_clock::now();",
		//   "	auto end = chrono::system_clock::now();",
		//   "	cerr << \"Program runs in \" << chrono::duration_cast<chrono::milliseconds>(end - start).count() << \"ms\" << endl;",
		  "	return 0;",
		  "}"
		],
		"description": "Competitve Programming Template"
	  }
}
